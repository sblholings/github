---
- name: create security group for EC2 Instance(s)
  local_action:
    module: ec2_group
    name: "{{ app }}-sg-{{ env }}-ec2"
    description: "sg for {{ app }}-ec2"
    region: "{{ region }}"
    vpc_id: "{{ vpc_id }}"
    state: present
    rules: "{{ vpc_routable_ips }}"
    rules_egress:
      - proto: all
        cidr_ip: "0.0.0.0/0"
  register: ec2_sg

- name: Create EC2 Instance(s)
  ec2:
    region: "{{ region }}"
    group: "{{ security_group }}"
    keypair: "{{ keypair }}"
    instance_type: "{{ instance_type }}"
    vpc_subnet_id: "{{ private_subnet }}"
    image: "{{ ami_image }}"
    wait: True
    instance_profile_name: "{{ instance_profile_name }}"
    monitoring: "{{ monitoring }}"
    wait_timeout: 600
    volumes:
       - volume_size: "{{ volume_size }}"
         device_name: "{{ device_name }}" 
         volume_type: "{{ volume_type }}" 
         encrypted: "{{ encrypted }}" 
         delete_on_termination: "{{ delete_on_termination }}" 
          
    instance_tags:
       Env: "{{ env }}"
       Name: "{{ custom_name }}"
    count_tag:
       Env: "{{ env }}"
       Name: "{{ custom_name }}"
    exact_count: "{{ ec2_count }}"
    
  register: ec2_primary

- set_fact:
    primary_ec2_private_ip: "{{ ec2_primary.tagged_instances[0].private_ip }}"

- debug:
    msg: "{{ ec2_primary.tagged_instances[0].private_ip }}"

- name: Wait for SSH to come up
  wait_for:
    host: "{{ item }}"
    port: 122
    delay: 300
    search_regex: OpenSSH
    timeout: 420
  with_items: "{{ ec2_primary.instances | get_ec2_info('private_ip') }}"

- name: Refresh the ec2.py cache
  shell: ./inventory/ec2.py --refresh-cache

- name: Refresh Inventory
  meta: refresh_inventory
 
- name: Adding EC2 instance(s) to the ELB
  ec2_elb:
    region: "{{ region }}"
    ec2_elbs: "{{ elb_name }}"
    instance_id: "{{ item.id }}"
    wait: no
    state: present
  with_items: "{{ ec2_primary.instances }}"

- name: setup license and admin password for primary node
  command: curl -L -X POST -k 'https://{{ item.private_ip }}:8443/setup/api/start' -F license=@ghe-configuration/enterprise.ghl -F "password={{ mc_password }}"
  with_items: "{{ ec2_primary.instances }}"
  state: present 
    
- name: Configure Instance Through JSON
  command: curl -L -X PUT -k 'https://api_key:{{ mc_password }}@{{ item.private_ip }}:8443/setup/api/settings' --data-urlencode "settings=`cat ghe-configuration/ghe-config.json`"
  with_items: "{{ ec2_primary.instances }}"
  state: present 
        
- name: Rerun Configure for Settings to Take Effect for primary node
  command:  curl -L -X POST -k 'https://api_key:{{ mc_password }}@{{ item.private_ip }}:8443/setup/api/configure'
  with_items: "{{ ec2_primary.instances }}"
  state: present 
    
- name: Wait for Non-HTTPS Web Admin (Port 8080)
  wait_for: host={{ item.private_ip }} port=8080 delay=120 timeout={{ aws_timeout }} state=started
  with_items: "{{ ec2_primary.instances }}"
  state: present